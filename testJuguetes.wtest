import juguetes.*

describe "juguetes" {
		
	const cubo = new Pieza(volumen=4, color=azul)
	const cilindro =new Pieza(volumen=3, color=rosa)
	const baldecito = new Baldecito(piezas=#{cubo, cilindro})
	 //TODO: Construir/configurar un baldecito de cuerpos geometricos que tenga 
	// un cubo de volumen  4 azul y un cilindro de volumen 3 rosa 	
	const pelota = new Pelota(radio=4)
	
	const tachitoGrande = new Pieza(volumen=6, color=azul)
	const tachitoMediano = new Pieza(volumen=5, color=azul)
	const tachitoChico = new Pieza(volumen=4, color=azul)

	const tachitos = new Tachitos(piezas=#{tachitoGrande, tachitoMediano, tachitoChico})//TODO: Construir un juego de tachitos apilables con 3 tachitos de volumen 6,5 y 4 respectivamente. todos azules.
		
	const valentin = new Niñe(edad=10) 
	const zoe = new Curiose(edad=20)//TODO: construir una niño curiosa de 20 meses de edad 
	const milena = new Revoltose(edad=15)//TODO: construir una niña revoltosa de 15 meses de edad

	method initialize() {
	   // TODO: configurar el cuv con un valor de 2
	}	
 
	test "costo de un juguete" {
		assert.equals(24, pelota.costo())
		assert.equals(21, baldecito.costo())
		assert.equals(39, tachitos.costo())
	}

 	
	test "eficacia" {
		assert.equals(12,pelota.eficacia())
		assert.equals(15,tachitos.eficacia())
		assert.equals(6,baldecito.eficacia())
	} 
	
 	test "precio" {
		assert.equals(144, pelota.precio())
		assert.equals(101, baldecito.precio())
		assert.equals(189, tachitos.precio())
	}


 	
	test "entretenimiento" {
		assert.equals(13.2, valentin.entretenimiento(pelota))
		assert.equals(21.6, zoe.entretenimiento(pelota))
		assert.equals( 6.9, milena.entretenimiento(pelota))
	}

 	
	test "obtener juguetes tipico" {
		valentin.recibir(pelota)
		valentin.recibir(tachitos)
		assert.equals(#{pelota, tachitos}, valentin.juguetes())
	}

 
	test "obtener juguetes curiosa" {
		zoe.recibir(pelota)
		assert.throwsException({zoe.recibir(tachitos)})
		assert.equals(#{pelota}, zoe.juguetes())
	}

 
	test "comprar juguetes revoltosa" {
		assert.throwsException({milena.recibir(pelota)})
		milena.recibir(tachitos)
		assert.equals(#{tachitos}, milena.juguetes())
	}

 	
	test "donar ok" {
		valentin.recibir(baldecito)
		valentin.recibir(pelota)
		valentin.recibir(tachitos)
		milena.recibirDonacion(valentin)
		assert.equals(#{tachitos}, milena.juguetes())
		assert.equals(#{baldecito, pelota}, valentin.juguetes())
	}

 	
	test "donar no ok" {
		zoe.recibir(baldecito)
		zoe.recibir(pelota)
		assert.throwsException({milena.recibirDonacion(zoe)})
		assert.that(milena.juguetes().isEmpty())
		assert.equals(#{baldecito, pelota}, zoe.juguetes())
	}

	
}